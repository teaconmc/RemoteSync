import java.time.Instant
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'signing'
}

version = '0.1.7'
group = 'org.teacon'
archivesBaseName = 'RemoteSync-FML'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven {
        name = "forge"
        url = "https://maven.minecraftforge.net/"
    }
}

dependencies {
    shadow group: 'org.bouncycastle', name: 'bcpg-jdk15on', version: '1.68'

    implementation group: 'net.minecraftforge', name: 'forgespi', version: '4.0.9'
    implementation group: 'cpw.mods', name: 'modlauncher', version: '9.1.3'
    implementation group: 'net.minecraftforge', name: 'fmlloader', version: '1.18.2-40.1.25'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
}

shadowJar {
    // Only packages dependencies under `shadow` configuration
    configurations = [ project.configurations.shadow ]

    // No extra MANIFEST.MF
    exclude 'META-INF/MANIFEST.MF'

    // Relocate to avoid package conflict
    relocate 'org.bouncycastle', 'org.teacon.sync.shadow.org.bouncycastle'

    // Also relocate the package name inside all services files.
    // See: https://github.com/johnrengelman/shadow/issues/291
    mergeServiceFiles()
}

jar {
    manifest {
        attributes([
            "Specification-Title": "RemoteSync",
            "Specification-Vendor": "3TUSK",
            "Specification-Version": "1.0",
            "Implementation-Title": "RemoteSync",
            "Implementation-Version": archiveVersion.get(),
            "Implementation-Vendor": "3TUSK",
            "Implementation-Timestamp": DateTimeFormatter.ISO_INSTANT.format(Instant.now().truncatedTo(ChronoUnit.SECONDS))
        ], 'org.teacon.sync')
    }
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = "org.teacon"
            artifactId = "RemoteSync-FML"

            artifact jar
            artifact shadowJar

            pom {
                name = 'RemoteSync for FML'
                description = 'Forbidden magic that automatically keeps your mods updated'
                url = 'https://github.com/teaconmc/RemoteSync'
                licenses {
                    license {
                        name = 'LGPL-2.1-or-later'
                        url = 'https://github.com/teaconmc/RemoteSync/tree/bleeding/COPYING.LGPL'
                    }
                }
                developers {
                    developer {
                        id = '3TUSK'
                        name = '3TUSK'
                    }
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/teaconmc/RemoteSync/issues'
                }
                scm {
                    url = 'https://github.com/teaconmc/RemoteSync'
                    connection = 'scm:git:git://github.com/teaconmc/RemoteSync.git'
                    developerConnection = 'scm:git:git@github.com:teaconmc/RemoteSync.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "teacon"
            url = "s3://maven/"
            credentials(AwsCredentials) {
                accessKey = System.env.ARCHIVE_ACCESS_KEY
                secretKey = System.env.ARCHIVE_SECRET_KEY
            }
        }
    }
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
// https://gist.github.com/phit/bd3c6d156a2fa5f3b1bc15fa94b3256c
//signing {
//    // TODO Sign release
//    if (System.env.GITHUB_ACTIONS) {
//        useGpgCmd()
//    }
//    sign publishing.publications.release
//}

tasks.withType(PublishToMavenRepository) {
    if (repository && repository.name == 'teacon') {
        onlyIf {
            System.env.ARCHIVE_ACCESS_KEY && System.env.ARCHIVE_SECRET_KEY
        }
    }
}

/**
 * A simple task to pass down the artifact name and path to other GitHub actions.
 */
task("githubActionOutput") {
    onlyIf {
        System.env.GITHUB_ACTIONS
    }
    doLast {
        println "::set-output name=artifact_path::${shadowJar.archiveFile.get().asFile.absolutePath}"
        println "::set-output name=artifact_name::${shadowJar.archiveFileName.get()}"
    }
}
